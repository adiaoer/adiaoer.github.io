<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>0/1分数规划</title>
      <link href="/2019/04/15/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
      <url>/2019/04/15/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.scu.edu.cn/soj/problem.action?id=2992" target="_blank" rel="noopener">SCU2992</a><br>现有n个物品，每个物品有两个权值a和b，现要从中选出k件物品，使得$\frac{\sum_{i=0}^k a_i}{\sum_{i=0}^k b_i}$ 的值最大。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>不妨设$$A = \sum_{i=0}^k a_i, B = \sum_{i=0}^k b_i, ans = \frac{A}{B}$$</p><p>那么 $$ A-ans*B = 0 $$ </p><p>展开，得每个物品的贡献为$$a_i-ans*b_i$$</p><p>然后排个序，取出贡献最高的前k件物品，累加得到一个贡献和$total$，若$total \leq 0$，则ans可以向左侧移动，否则向右侧移动。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://paste.ubuntu.com/p/db3Scbjww3/" target="_blank" rel="noopener">代码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">        os &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">set</span>&lt;T&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">        os &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T sgn = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'-'</span>)</span><br><span class="line">            sgn = -sgn;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res * sgn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">233</span>;</span><br><span class="line">ll a[N], b[N];</span><br><span class="line"><span class="keyword">double</span> f[N];</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chck</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll sa = <span class="number">0</span>;</span><br><span class="line">    ll sb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        f[i] = <span class="number">1.0</span> * (a[i] - b[i] * x);</span><br><span class="line">    sort(f, f+n, greater&lt;<span class="keyword">double</span>&gt;());</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n-k; ++i)</span><br><span class="line">        res += f[i];</span><br><span class="line">    <span class="keyword">return</span> res &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define local</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">    freopen(<span class="string">"data.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"ans.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            a[i] = read&lt;ll&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            b[i] = read&lt;ll&gt;();</span><br><span class="line">        <span class="keyword">double</span> l = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r-l &gt;= EPS)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> mid = (l+r) / <span class="number">2.0</span>;</span><br><span class="line">            <span class="keyword">if</span>(chck(mid))</span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(round(<span class="number">100.0</span> * l)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流24题(Part.2)</title>
      <link href="/2019/04/12/NetFlow24-2/"/>
      <url>/2019/04/12/NetFlow24-2/</url>
      
        <content type="html"><![CDATA[<p>这里是网络流24题建图的方法（题目来自洛谷）<br>包含：P2763, P2764</p><a id="more"></a><h1 id="网络流24题-Part-2"><a href="#网络流24题-Part-2" class="headerlink" title="网络流24题(Part.2)"></a>网络流24题(Part.2)</h1><h2 id="洛谷P2763"><a href="#洛谷P2763" class="headerlink" title="洛谷P2763"></a><a href="https://www.luogu.org/problemnew/show/P2763" target="_blank" rel="noopener">洛谷P2763</a></h2><h3 id="此题为MaxFlow"><a href="#此题为MaxFlow" class="headerlink" title="此题为MaxFlow"></a>此题为MaxFlow</h3><ol><li>对于每一道题，在它和它的所有适用类型之间连边</li><li>新建一个超级源点，将它和所有题目相连</li><li>新建一个超级汇点，将所有类型和它相连</li><li>打印方案遍历边集</li><li>当且仅当流向汇点的弧不满载时无解</li></ol><h2 id="洛谷P2764"><a href="#洛谷P2764" class="headerlink" title="洛谷P2764"></a><a href="https://www.luogu.org/problemnew/show/P2764" target="_blank" rel="noopener">洛谷P2764</a></h2><h3 id="此题为MaxFlow-1"><a href="#此题为MaxFlow-1" class="headerlink" title="此题为MaxFlow"></a>此题为MaxFlow</h3><p>建图方式题面已经给出，简单概括一下：</p><ol><li>搞成二分图</li><li>给出的所有边改为在左集和右集之间连接</li><li>另建源点与左集，汇点与右集相连</li><li>打印方案时，在找到增广路之后记录一下路径即可</li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>贴个结论：<strong>最小路径覆盖数目 = 顶点数 - 最大匹配</strong></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流24题(Part.1)</title>
      <link href="/2019/04/10/NetFlow24-1/"/>
      <url>/2019/04/10/NetFlow24-1/</url>
      
        <content type="html"><![CDATA[<p>这里是网络流24题建图的方法（题目来自洛谷）<br>包含：P1251, P2754, P2756, P2761, P2762</p><a id="more"></a><h1 id="网络流24题-Part-1"><a href="#网络流24题-Part-1" class="headerlink" title="网络流24题(Part.1)"></a>网络流24题(Part.1)</h1><h2 id="洛谷P1251"><a href="#洛谷P1251" class="headerlink" title="洛谷P1251"></a><a href="https://www.luogu.org/problemnew/show/P1251" target="_blank" rel="noopener">洛谷P1251</a></h2><h3 id="此题为MCMF"><a href="#此题为MCMF" class="headerlink" title="此题为MCMF"></a>此题为MCMF</h3><p>首先，将一天拆成晚上和早上，每天晚上会受到脏餐巾（来源：当天早上用完的餐巾，在这道题中可理解为从原点获得），每天早上又有干净的餐巾（来源：购买、快洗店、慢洗店。）</p><ol><li>从原点向每一天晚上连一条流量为当天所用餐巾x，费用为0的边，表示每天晚上从起点获得x条脏餐巾。</li><li>从每一天早上向汇点连一条流量为当天所用餐巾x，费用为0的边，每天白天,表示向汇点提供x条干净的餐巾,流满时表示第i天的餐巾够用。</li><li>从每一天晚上向第二天晚上连一条流量为INF，费用为0的边，表示每天晚上可以将脏餐巾留到第二天晚上（注意不是早上，因为脏餐巾在早上不可以使用）。</li><li>从每一天晚上向这一天+快洗所用天数$t_1$的那一天早上连一条流量为INF，费用为快洗所用钱数的边，表示每天晚上可以送去快洗部,在地$i+t_1$天早上收到餐巾。</li><li>同理，从每一天晚上向这一天+慢洗所用天数$t_2$的那一天早上连一条流量为INF，费用为慢洗所用钱数的边，表示每天晚上可以送去慢洗部,在地$i+t_2$天早上收到餐巾 。</li><li>从起点向每一天早上连一条流量为INF，费用为购买餐巾所用钱数的边，表示每天早上可以购买餐巾。</li></ol><h2 id="洛谷P2754"><a href="#洛谷P2754" class="headerlink" title="洛谷P2754"></a><a href="https://www.luogu.org/problemnew/show/P2754" target="_blank" rel="noopener">洛谷P2754</a></h2><h3 id="此题为MaxFlow"><a href="#此题为MaxFlow" class="headerlink" title="此题为MaxFlow"></a>此题为MaxFlow</h3><p>将每一个星球按时间拆点，不妨将第i个星球在第j时刻的状态表示为$(i, j)$，$path_{i, j}$表示第i艘飞船当前在第j站，第i艘飞船的运行周期为$t_i$。则有：</p><ol><li>首先判断时候存在解（并查集），若不存在，判0结束。否则执行下面的步骤：</li><li>由于每个星球上的人有两个选择：要么上飞船（如果有），要么等一个单位的时间。所以建两条边$(path_{i, j}, j) \rightarrow (path_{i, (j+1) \% t_i}, j+1)$，$(i, j) \rightarrow (i, j+1)$。</li><li>在当前时刻j，建立一条从源点到起点（地球）的边，即：$Source\rightarrow (earth, j)$</li><li>在当前时刻j，建立一条从终点（月球）到汇点的边，即：$(moon, j)\rightarrow Sink$</li><li>一旦此网络的流量等于k，结束加边过程，给出答案。</li></ol><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ol><li>这题需要一边加边一边跑最大流，即：每增加一次当前时刻，加边，然后跑最大流</li><li>每次跑最大流时，在上次残量网络的基础上跑（<strong>千万不要清空残量网络</strong>）</li></ol><h2 id="洛谷P2756"><a href="#洛谷P2756" class="headerlink" title="洛谷P2756"></a><a href="https://www.luogu.org/problemnew/show/P2756" target="_blank" rel="noopener">洛谷P2756</a></h2><h3 id="此题为MaxFlow-二分图"><a href="#此题为MaxFlow-二分图" class="headerlink" title="此题为MaxFlow(二分图)"></a>此题为MaxFlow(二分图)</h3><ol><li>整一个超级源点和超级汇点，超级源点连左集中所有节点，右集所有节点连向超级汇点；然后就按题目给的边连上就行。</li><li>跑Dinic，完了以后检索边集，发现有流量的边就输出。（注意下不要把含有源点和汇点的输出来）</li></ol><h2 id="洛谷P2761"><a href="#洛谷P2761" class="headerlink" title="洛谷P2761"></a><a href="https://www.luogu.org/problemnew/show/P2761" target="_blank" rel="noopener">洛谷P2761</a></h2><h3 id="此题为状压、SPFA-什么鬼"><a href="#此题为状压、SPFA-什么鬼" class="headerlink" title="此题为状压、SPFA(什么鬼?)"></a>此题为状压、SPFA<del>(什么鬼?)</del></h3><ol><li>可以将每个状态用一个整数表示$(n \leq 20)$</li><li>没有必要把所有边全部存下来，只需要在跑SPFA时确定是否能够转移即可。</li></ol><h2 id="洛谷P2762"><a href="#洛谷P2762" class="headerlink" title="洛谷P2762"></a><a href="https://www.luogu.org/problemnew/show/P2762" target="_blank" rel="noopener">洛谷P2762</a></h2><h3 id="此题为最小割-最大流定理"><a href="#此题为最小割-最大流定理" class="headerlink" title="此题为最小割-最大流定理"></a>此题为最小割-最大流定理</h3><ol><li>建边：$S \rightarrow E_i, E_i \rightarrow I_j, I_j \rightarrow T$(其中S为源点，$E_i$为第i个实验，$I_i$为第i件设备)</li></ol><p>建好的图大概是这样：（图片由<a href="https://www.luogu.org/space/show?uid=52915" target="_blank" rel="noopener">SSL_XXY_BlackCloud</a>$julao$制作）<br><img src="/images/网络流24题/21712.png" alt="img"></p><ol start="2"><li>最终答案为最后一次BFS是仍然能够访问到的点（其他节点都被割掉了）</li></ol>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dinic </tag>
            
            <tag> SPFA </tag>
            
            <tag> MCMF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miller-Rabin &amp; Pollard-Rho</title>
      <link href="/2019/04/04/Miller-Rabin&amp;Pollard-Rho/"/>
      <url>/2019/04/04/Miller-Rabin&amp;Pollard-Rho/</url>
      
        <content type="html"><![CDATA[<p>Miller-Rabin是一种能够快速判定素数的算法，其时间复杂度为$O(logn)$<br>Pollard-Rho是一种能够快速进行质因数分解的算法，其时间复杂度为$O(n^{1/4})$，空间复杂度为$O(logn)$。</p><a id="more"></a><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>以下内容来自<a href="https://codeforces.com/profile/CQUzbx" target="_blank" rel="noopener">zbx</a>大佬的PPT</p><h3 id="Miller-Rabin"><a href="#Miller-Rabin" class="headerlink" title="Miller-Rabin"></a>Miller-Rabin</h3><blockquote><p>偶数单独处理，否则设$n=2^t×m+1$;<br>任选一个整数a，对$k=0,1,2,…,t$分别计算$a^{2^k*m}%n$的值$a(k)$;<br>对于某个k，如果$a(k)=1$，但$a(k-1)$既不是1也不是n−1，则n是合数；<br>如果$a(t)$仍然不是1，则n是合数；<br>否则，n通过了基于a的测试，可以另选一个整数a继续测试。<br>每一轮测试时间复杂度$O(logn)$，进行c轮时间复杂度$O(clogn)$。</p></blockquote><blockquote><p>$n\leq2^{32}$时，只需检测$a=2,7,61$，即可确保正确，即$c=3$；<br>$n\leq2^{64}$时，只需检测$a=2,3,5,7,11$，即可确保正确，即$c=5$。<br>n特别大时，随机选一个a进行测试，合数通过测试的概率低于$\frac{1}{4}$，合数通过c轮测试的概率低于$\frac{1}{4^c}$，适当设定测试次数即可。</p></blockquote><h3 id="Pollard-Rho"><a href="#Pollard-Rho" class="headerlink" title="Pollard-Rho"></a>Pollard-Rho</h3><blockquote><p>先用Miller-Rabin算法确定n是合数；<br>随机整数$x_0$和a，生成一个序列$x_{i+1}=(x_i^2+a)%n$；<br>对$i=1,2,3…$分别计算$p=gcd⁡(\mid x_{2i}−x_{i}\mid,n)$，当$x_{2i}=x_{i}$时停止并重新随机生成$x_0$和a；<br>如果$p\not=1$则找到了n的一个约数p，递归处理p和n/p。<br>时间复杂度$O(n^{1/4})$，空间复杂度$O(log⁡n)$。</p></blockquote><blockquote><p>时间复杂度的计算：<br>设$n=pq,p\leq q$，序列$y_i \equiv x_i(mod p)$；<br>根据生日悖论，${y_i}$周期期望长度$O(\sqrt p)$，${x_i}$周期期望长度$O(\sqrt n)$，不妨假设${y_i}$周期短；<br>设${y_i}$周期为t，则$x_2t$与$x_t$还没进入周期，计算$gcd(\mid x_{2t}−x_t\mid, n)$可以得到p。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://paste.ubuntu.com/p/fCFpVgmTnh/" target="_blank" rel="noopener">代码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Miller_Rho</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; res;                     <span class="comment">//质因数分解结果</span></span><br><span class="line">    <span class="built_in">map</span>&lt;ll, ll&gt; cnt;                    <span class="comment">//统计每个因数的数目</span></span><br><span class="line"></span><br><span class="line">    Miller_Rho()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;().swap(res);</span><br><span class="line">        <span class="built_in">map</span>&lt;ll, ll&gt;().swap(cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">fm</span><span class="params">(ll a, ll b, ll mod)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">                res += a;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            res %= mod;</span><br><span class="line">            a += a;</span><br><span class="line">            a %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">fp</span><span class="params">(ll a, ll b, ll mod)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a %= mod;</span><br><span class="line">        ll res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">                res = fm(res, a, mod);</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a = fm(a, a, mod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Miller-Rabin算法核心</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a, ll n, ll x, ll t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll res = fp(a, x, n);                <span class="comment">//即a ^ x % n;</span></span><br><span class="line">        ll lst = res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            res *= res;</span><br><span class="line">            res %= n;</span><br><span class="line">            <span class="keyword">if</span>(res == <span class="number">1</span> &amp;&amp; lst != <span class="number">1</span> &amp;&amp; lst != n<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            lst = res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ll t = <span class="number">0</span>;                       <span class="comment">// x = 2^t*m + 1</span></span><br><span class="line">        ll n = x<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ll temp = rand()%(x<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!check(temp, x, n, t))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">pollard_rho</span><span class="params">(ll x, ll c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll i = <span class="number">1</span>, k = <span class="number">2</span>;</span><br><span class="line">        ll x0 = rand() % x;</span><br><span class="line">        ll y = x0;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">            x0 = (fm(x0, x0, x) + c) % x;        <span class="comment">//即(x0 * x0 + c) % x;</span></span><br><span class="line">            ll gcd = <span class="built_in">abs</span>(__gcd(y-x0, x));</span><br><span class="line">            <span class="keyword">if</span>(gcd != <span class="number">1</span> &amp;&amp; gcd != x)</span><br><span class="line">                <span class="keyword">return</span> gcd;</span><br><span class="line">            <span class="keyword">if</span>(y == x0)</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            <span class="keyword">if</span>(i == k)</span><br><span class="line">            &#123;</span><br><span class="line">                y = x0;</span><br><span class="line">                k += k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_fact</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_prime(x))</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(x);</span><br><span class="line">            cnt[x]++;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        ll p = x;</span><br><span class="line">        <span class="keyword">while</span>(p &gt;= x)</span><br><span class="line">            p = pollard_rho(p, rand()%(x<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">        get_fact(p);</span><br><span class="line">        get_fact(x/p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;().swap(res);</span><br><span class="line">        <span class="built_in">map</span>&lt;ll, ll&gt;().swap(cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fact_sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(res.begin(), res.end());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fact_uniq</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(res.begin(), res.end());</span><br><span class="line">        unique(res.begin(), res.end());</span><br><span class="line">        res.resize(cnt.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, Miller_Rho&amp; current)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(current.res.size())</span><br><span class="line">            os &lt;&lt; current.res[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">1</span>, t = current.res.size(); i &lt; t; ++i)</span><br><span class="line">            os &lt;&lt; <span class="string">"*"</span> &lt;&lt; current.res[i];</span><br><span class="line">        os &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> os;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>fm函数的作用是防止在进行乘法时<strong>爆long long</strong></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>次小生成树</title>
      <link href="/2019/04/04/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2019/04/04/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>次小生成树，即把所有生成树按权值从小到大排列，排在第二位生成树。<br>（如果最小生成树不唯一，次小生成树的权值和最小生成树相等）<br><a id="more"></a></p><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>显然，次小生成树必然是经过最小生成树<strong>加一条边后删一条边</strong>得到的。</p><p>最容易想到的方法就是暴力。</p><p>由于次小生成树不会和最小生成树完全相同，所以我们求出最小生成树后，依次枚举不出现在次小生成树上的边，然后对n-1张“缺一条边的图”求一次最小生成树。这n-1棵树中权值最小的树即为次小生成树。</p><p>然而，暴力法的时间复杂度$O(mn\alpha(n, m))$是大部分情况下是无法接受的。</p><p>还有一种更好的方法：枚举要加入哪条新边。在最小生成树上添加一条新边$&lt;u, v&gt;$之后，图上会出现一条回路，因此删除的边必须在最小生成树上u到v的路径上，并且删去的边的权值必然是最大的。总时间复杂度为$O(n^2)$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://paste.ubuntu.com/p/YbYpbFHyQS/" target="_blank" rel="noopener">代码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">        os &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">set</span>&lt;T&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">        os &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T sgn = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'-'</span>)</span><br><span class="line">            sgn = -sgn;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res * sgn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f, t, c;</span><br><span class="line">    <span class="keyword">bool</span> vis;</span><br><span class="line"></span><br><span class="line">    edge(<span class="keyword">int</span> f = <span class="number">0</span>, <span class="keyword">int</span> t = <span class="number">0</span>, <span class="keyword">int</span> c = <span class="number">0</span>):</span><br><span class="line">        f(f), t(t), c(c), vis(<span class="literal">false</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge&amp; cmp) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == cmp.c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(f == cmp.f)</span><br><span class="line">                <span class="keyword">return</span> t &lt; cmp.t;</span><br><span class="line">            <span class="keyword">return</span> f &lt; cmp.f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c &lt; cmp.c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        f = ::read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        t = ::read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        c = ::read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e3</span> + <span class="number">233</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">666</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">edge a[N];</span><br><span class="line"><span class="keyword">int</span> fa[M], n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[M];</span><br><span class="line"><span class="keyword">int</span> maxd[M][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">found</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == fa[x]? x: fa[x] = found(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].clear();</span><br><span class="line">        g[i].push_back(i);</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sumn = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt == n<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> x = found(a[i].f);</span><br><span class="line">        <span class="keyword">int</span> y = found(a[i].t);</span><br><span class="line">        <span class="keyword">if</span>(x != y)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            a[i].vis = <span class="literal">true</span>;</span><br><span class="line">            sumn += a[i].c;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j: g[x])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> k: g[y])</span><br><span class="line">                    maxd[j][k] = maxd[k][j] = a[i].c;</span><br><span class="line">            fa[x] = y;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j: g[x])</span><br><span class="line">                g[y].push_back(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; n<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No MST\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="keyword">if</span>(!a[i].vis)</span><br><span class="line">            temp = min(temp, sumn + a[i].c - maxd[a[i].f][a[i].t]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define local</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">    freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"ans.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">    n = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    m = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        a[i].read();</span><br><span class="line">    sort(a, a+m);</span><br><span class="line">    kruskal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>这种方法也可以用于判定最小生成树的唯一性。（当次小生成树的权值与最小生成树相等时，最小生成树不唯一）</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Splay树</title>
      <link href="/2019/03/28/Splay-Tree/"/>
      <url>/2019/03/28/Splay-Tree/</url>
      
        <content type="html"><![CDATA[<p>伸展树（Splay Tree），也叫分裂树，是一种二叉排序树。平均情况下，它能在$O(log N)$ <del>极端情况下为O(N)</del> 内完成插入、查找和删除操作。其优势在于不需要记录平衡树的冗余信息。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现要维护一个序列${A_n}$(所有$A_i$初值为0)，要求支持如下操作(<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=1251" target="_blank" rel="noopener">bzoj1251</a>)：</p><ol><li>对于区间$[L, R]$上的每一个元素，其值增加$val$</li><li>对于区间$[L, R]$翻转这段区间上的元素</li><li>查询区间$[L, R]$上的最大值</li></ol><p>由于翻转操作的存在，导致使用线段树维护变的困难，所以这里使用splay进行维护。</p><p>对于每次操作，我们将下标为L-1的节点旋转至树根，将下标为R+1的节点旋转至树根的右儿子，由于splay树的有序性，区间[L, R]就是R+1的左子树。</p><h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><p>Zig(将x节点右旋至根节点，Zag操作反之):<br><img src="/images/Splay_tree/Zig.png" alt="img"></p><p>Zig-Zig(对x节点进行两次右旋操作，使其到达根节点):<br><img src="/images/Splay_tree/Zigzig.gif" alt="img"></p><p>Zig-Zag(对x节点线进行左旋，在进行右旋操作，使其到达根节点):<br><img src="/images/Splay_tree/Zigzag.gif" alt="img"></p><p>需要注意的是，splay树永远满足如下性质：</p><blockquote><p>对于任意节点（不妨设其下标为x)，设其左儿子（如有）的下标为L，其右儿子（如有）的下标为R，则有：$L &lt; x &lt; R$</p></blockquote><p>旋转操作永远不会改变这一性质(具体操作见代码中的rotate函数)。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://paste.ubuntu.com/p/PQfYkGDxjF/" target="_blank" rel="noopener">代码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T sgn = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = getchar();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'-'</span>)</span><br><span class="line">            sgn = -sgn;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res * sgn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">splay_tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val, Max, add, sz, son[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">bool</span> rev;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _val)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            val = Max = _val;</span><br><span class="line">            add = rev = son[<span class="number">0</span>] = son[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            sz = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    node T[N];</span><br><span class="line">    <span class="keyword">int</span> fa[N], root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新获取节点信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T[x].Max = T[x].val;</span><br><span class="line">        T[x].sz = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(T[x].son[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            T[x].Max = max(T[x].Max, T[T[x].son[<span class="number">0</span>]].Max);</span><br><span class="line">            T[x].sz += T[T[x].son[<span class="number">0</span>]].sz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(T[x].son[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            T[x].Max = max(T[x].Max, T[T[x].son[<span class="number">1</span>]].Max);</span><br><span class="line">            T[x].sz += T[T[x].son[<span class="number">1</span>]].sz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下放标记</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(T[x].add)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(T[x].son[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                T[T[x].son[<span class="number">0</span>]].val += T[x].add;</span><br><span class="line">                T[T[x].son[<span class="number">0</span>]].add += T[x].add;</span><br><span class="line">                T[T[x].son[<span class="number">0</span>]].Max += T[x].add;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(T[x].son[<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                T[T[x].son[<span class="number">1</span>]].val += T[x].add;</span><br><span class="line">                T[T[x].son[<span class="number">1</span>]].add += T[x].add;</span><br><span class="line">                T[T[x].son[<span class="number">1</span>]].Max += T[x].add;</span><br><span class="line">            &#125;</span><br><span class="line">            T[x].add = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(T[x].rev)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(T[x].son[<span class="number">0</span>])</span><br><span class="line">                T[T[x].son[<span class="number">0</span>]].rev ^= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(T[x].son[<span class="number">1</span>])</span><br><span class="line">                T[T[x].son[<span class="number">1</span>]].rev ^= <span class="number">1</span>;</span><br><span class="line">            swap(T[x].son[<span class="number">0</span>], T[x].son[<span class="number">1</span>]);</span><br><span class="line">            T[x].rev = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// kind = 0时左旋，kind = 1时右旋</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> kind)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x];</span><br><span class="line">        <span class="keyword">int</span> z = fa[y];</span><br><span class="line">        T[y].son[!kind] = T[x].son[kind];</span><br><span class="line">        fa[T[x].son[kind]] = y;</span><br><span class="line"></span><br><span class="line">        T[x].son[kind] = y;</span><br><span class="line">        fa[y] = x;</span><br><span class="line"></span><br><span class="line">        T[z].son[T[z].son[<span class="number">1</span>] == y] = x;</span><br><span class="line">        fa[x] = z;</span><br><span class="line">        pushup(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将节点x旋转至goal位置</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> goal)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == goal)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">while</span>(fa[x] != goal)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = fa[x];</span><br><span class="line">            <span class="keyword">int</span> z = fa[y];</span><br><span class="line">            pushdown(x);</span><br><span class="line">            pushdown(y);</span><br><span class="line">            pushdown(z);</span><br><span class="line">            <span class="keyword">int</span> rx = T[y].son[<span class="number">0</span>] == x;</span><br><span class="line">            <span class="keyword">int</span> ry = T[z].son[<span class="number">0</span>] == y;</span><br><span class="line">            <span class="keyword">if</span>(z == goal)</span><br><span class="line">                rotate(x, rx);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(rx == ry)</span><br><span class="line">                    rotate(y, ry);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    rotate(x, rx);</span><br><span class="line">                rotate(x, ry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pushup(x);</span><br><span class="line">        <span class="keyword">if</span>(goal == <span class="number">0</span>)</span><br><span class="line">            root = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回下标为pos的节点在树的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = root;</span><br><span class="line">        pushdown(u);</span><br><span class="line">        <span class="keyword">while</span>(T[T[u].son[<span class="number">0</span>]].sz != pos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pos &lt; T[T[u].son[<span class="number">0</span>]].sz)</span><br><span class="line">                u = T[u].son[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                pos -= T[T[u].son[<span class="number">0</span>]].sz + <span class="number">1</span>;</span><br><span class="line">                u = T[u].son[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            pushdown(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询、修改操作相关</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pre_sol</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u = select(l<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> v = select(r+<span class="number">1</span>);</span><br><span class="line">        splay(u, <span class="number">0</span>);</span><br><span class="line">        splay(v, u);</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = pre_sol(l, r);</span><br><span class="line">        T[T[v].son[<span class="number">0</span>]].Max += val;</span><br><span class="line">        T[T[v].son[<span class="number">0</span>]].val += val;</span><br><span class="line">        T[T[v].son[<span class="number">0</span>]].add += val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = pre_sol(l, r);</span><br><span class="line">        T[T[v].son[<span class="number">0</span>]].rev ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = pre_sol(l, r);</span><br><span class="line">        <span class="keyword">return</span> T[T[v].son[<span class="number">0</span>]].Max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>, sl, sr;</span><br><span class="line">        T[mid].son[<span class="number">0</span>] = sl = build(l, mid<span class="number">-1</span>);</span><br><span class="line">        T[mid].son[<span class="number">1</span>] = sr = build(mid+<span class="number">1</span>, r);</span><br><span class="line">        fa[sl] = fa[sr] = mid;</span><br><span class="line">        pushup(mid);</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理，注意三个-INF的边界处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T[<span class="number">0</span>].init(-INF);</span><br><span class="line">        T[<span class="number">1</span>].init(-INF);</span><br><span class="line">        T[n+<span class="number">2</span>].init(-INF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n+<span class="number">1</span>; ++i)</span><br><span class="line">            T[i].init(<span class="number">0</span>);</span><br><span class="line">        root = build(<span class="number">1</span>, n+<span class="number">2</span>);</span><br><span class="line">        fa[root] = <span class="number">0</span>;</span><br><span class="line">        fa[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        T[<span class="number">0</span>].son[<span class="number">1</span>] = root;</span><br><span class="line">        T[<span class="number">0</span>].sz = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">splay_tree solver;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define local</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">    freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"ans.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">    <span class="keyword">int</span> n = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="keyword">int</span> m = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    solver.init(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        a = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        b = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        c = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            d = read&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            solver.update(b, c, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">2</span>)</span><br><span class="line">            solver.reverse(b, c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solver.query(b, c));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 区间维护 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ManaCher算法</title>
      <link href="/2019/03/25/ManaCher/"/>
      <url>/2019/03/25/ManaCher/</url>
      
        <content type="html"><![CDATA[<p>Manacher算法是查找一个字符串的最长回文子串的线性算法。其时间复杂度为$O(n)$</p><a id="more"></a><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>由于存在奇回文与偶回文两种类型的回文串，分开判断较为复杂，所以将二者全部处理成奇回文。(以下内容来自<a href="https://codeforces.com/profile/sundes" target="_blank" rel="noopener">Sundes</a>大佬的PPT)</p><blockquote><p>考虑将原字符串StrA进行预处理，不妨在字符串首尾位置以及任意两字符之间插入一个原本不存在于StrA中的字符。得到字符串StrB，经过这样处理后所有的回文都变成了奇回文，且回文性质不变。<br>如:<br>$$bob     –&gt;     #b#o#b#$$<br>$$noon     –&gt;     #n#o#o#n#$$<br>$$level     –&gt;     #l#e#v#e#l#$$<br>由于第一个和最后一个字符都是#号，且也需要搜索回文，为了防止越界，我们还需要在首尾再加上非#号字符，实际操作时我们只需给开头加上个非#号字符，结尾不用加的原因是字符串的结尾标识为’\0’，等于默认加过了。<br>不妨在字符串首插入字符’\$’<br>$$bob     –&gt;     $#b#o#b#$$<br>$$noon     –&gt;     $#n#o#o#n#$$<br>$$level     –&gt;     $#l#e#v#e#l#$$<br>通过以上预处理，字符串StrA转化为了字符串StrB。</p></blockquote><blockquote><p>记数组p[max_len]，p[i]表示StrB以i位置的字符为中心点，最长回文子串的半径大小 (即回文长度(len-1)/2) ，注意max_len最少应为原字符串StrA长度两倍加一。<br>通过p数组我们就可以找到其最大值和其位置，就能确定最长回文子串了，那么下面我们就来看如何求p数组，需要新增两个辅助变量mx和id，其中id为最大回文子串中心的位置，mx是回文串能延伸到的最右端的位置。(即id+p[id])<br>这个算法的最核心的一行如下：<br>$$p[i] = mx &gt; i ? min(p[2 * id - i], mx - i) : 1;$$</p></blockquote><blockquote><p>下面详细介绍该转移方程的内涵<br>当 mx - i &gt; p[j] 的时候，以StrB[j]为中心的回文子串包含在以StrB[id]为中心的回文子串中，由于 i 和 j 对称，以StrB[i]为中心的回文子串必然包含在以StrB[id]为中心的回文子串中，所以必有 $P[i] = P[j]$，见下图。<br><img src="/images/manacher/1.jpg" alt></p></blockquote><blockquote><p>当 $P[j] &gt;= mx - i$ 的时候，以StrB[j]为中心的回文子串不完全包含于以StrB[id]为中心的回文子串中，但是基于对称性可知，下图中两个绿框所包围的部分是相同的，也就是说以StrB[i]为中心的回文子串，其向右至少会扩张到mx的位置，也就是说 $P[i] &gt;= mx - i$。至于mx之后的部分是否依旧对称，则需要朴素的对比。<br>在此过程中维护mx与id。（若回文串能延伸到的最右端的位置大于mx，则修改mx与id）<br><img src="/images/manacher/2.jpg" alt></p></blockquote><blockquote><p>对于 $mx &lt;= i$ 的情况，无法对 P[i]做更多的假设，只能$P[i] = 1$，然后再去匹配了。<br>由于每一个位置最多只会被朴素的匹配一次，所以算法复杂程度$O(n)$;</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://paste.ubuntu.com/p/2r4Gr8KgnD/" target="_blank" rel="noopener">代码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">int</span> maxr = <span class="number">0</span>, mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; maxr)</span><br><span class="line">            val[i] = min(val[(mid&lt;&lt;<span class="number">1</span>) - i], maxr-i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            val[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i-val[i]] == s[i+val[i]])</span><br><span class="line">            val[i]++;</span><br><span class="line">        <span class="keyword">if</span>(val[i] + i &gt; maxr)</span><br><span class="line">        &#123;</span><br><span class="line">            maxr = val[i] + i;</span><br><span class="line">            mid = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (*max_element(val, val+len)) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老司机树</title>
      <link href="/2019/03/24/ODT/"/>
      <url>/2019/03/24/ODT/</url>
      
        <content type="html"><![CDATA[<p>老司机树(ODT，又名Chtholly Tree，珂朵莉树), 由<a href="https://codeforces.com/profile/ODT" target="_blank" rel="noopener">ODT</a>大佬提出。<br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="来源：Codeforces896C"><a href="#来源：Codeforces896C" class="headerlink" title="来源：Codeforces896C"></a>来源：<a href="https://codeforces.com/problemset/problem/896/C" target="_blank" rel="noopener">Codeforces896C</a></h3><p>对于一个序列，<strong>随机</strong>地进行一系列包含<strong>推平一段区间</strong>在内的操作，可以采用这种数据结构</p><p>其核心思想为，将每一段值相等的子序列用一个三元组$(l, r, val)$表示，由于“<strong>推平一段区间</strong>”操作的存在且操作是随机的，所以三元组序列的长度将趋近于$log n$。</p><p>对于每次操作$[L, R]$，将包含待L或R的三元组$(x, y, val)$分成两个三元组$(x, L-1, val)$, $(L, y, val)$, 使得$L, R$处于三元组的左边界，然后对区间内部的三元组进行<del>暴力</del>维护。</p><p>顺带提一句，如果使用set维护三元组的话，由于set内部的元素一旦插入就不可更改，所以成员变量应当使用<strong>mutable</strong>关键字声明。</p><p><strong>注意如果值的更改使得元素的优先级发生了变化，将导致set内部元素不再有序</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://paste.ubuntu.com/p/hcFwdwcCwp/" target="_blank" rel="noopener">代码</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">os &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; os, <span class="keyword">const</span> <span class="built_in">set</span>&lt;T&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : v)</span><br><span class="line">os &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T sgn = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'-'</span>)</span><br><span class="line">sgn = -sgn;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">'0'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'9'</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = res * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">c = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res * sgn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">mutable</span> ll l, r, val;</span><br><span class="line"></span><br><span class="line">node(ll l = <span class="number">0</span>, ll r = <span class="number">0</span>, ll val = <span class="number">0</span>):</span><br><span class="line">l(l), r(r), val(val)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; cmp) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l == cmp.l)</span><br><span class="line"><span class="keyword">return</span> r &lt; cmp.r;</span><br><span class="line"><span class="keyword">return</span> l &lt; cmp.l;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">heapnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ll len, val;</span><br><span class="line"></span><br><span class="line">heapnode(ll len = <span class="number">0</span>, ll val = <span class="number">0</span>):</span><br><span class="line">len(len), val(val)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> heapnode&amp; cmp) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(val == cmp.val)</span><br><span class="line"><span class="keyword">return</span> len &lt; cmp.len;</span><br><span class="line"><span class="keyword">return</span> val &lt; cmp.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">233</span>;</span><br><span class="line">ll dig[N], seed, n, m, op, vm, l, r, x, y;</span><br><span class="line"><span class="built_in">set</span>&lt;node&gt; s;</span><br><span class="line"><span class="built_in">vector</span>&lt;heapnode&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">rnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ret = seed;</span><br><span class="line">seed = (seed * <span class="number">7</span> + <span class="number">13</span>) % MOD;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;seed, &amp;vm);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">dig[i] = (rnd() % vm) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getOp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">op = (rnd() % <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">l = (rnd() % n) + <span class="number">1</span>;</span><br><span class="line">r = (rnd() % n) + <span class="number">1</span>;</span><br><span class="line">x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r)</span><br><span class="line">swap(l, r);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">x = (rnd() % (r-l+<span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">x = (rnd() % vm) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">4</span>)</span><br><span class="line">y = (rnd() % vm) + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;node&gt;::<span class="function">iterator <span class="title">split</span><span class="params">(<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> p = s.lower_bound(node(pos));</span><br><span class="line"><span class="keyword">if</span>(p != s.end() &amp;&amp; p-&gt;l == pos)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p--;</span><br><span class="line"><span class="keyword">if</span>(pos &gt; p-&gt;r)</span><br><span class="line"><span class="keyword">return</span> s.end();</span><br><span class="line">ll l = p-&gt;l;</span><br><span class="line">ll r = p-&gt;r;</span><br><span class="line">ll v = p-&gt;val;</span><br><span class="line">s.erase(p);</span><br><span class="line">s.emplace(l, pos<span class="number">-1</span>, v);</span><br><span class="line"><span class="keyword">return</span> s.emplace(pos, r, v).first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">fp</span><span class="params">(ll x, ll y, ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line">x %= mod;</span><br><span class="line"><span class="keyword">while</span>(y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">res *= x;</span><br><span class="line">x *= x;</span><br><span class="line">x %= mod;</span><br><span class="line">res %= mod;</span><br><span class="line">y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #define local</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> local</span></span><br><span class="line">freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"ans.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">getData();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">s.emplace(i, i, dig[i]);</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">getOp();</span><br><span class="line">split(l);</span><br><span class="line"><span class="keyword">auto</span> sr = split(r+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">auto</span> sl = split(l);</span><br><span class="line"><span class="keyword">switch</span>(op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(; sl != sr; ++sl)</span><br><span class="line">sl-&gt;val += x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">&#123;</span><br><span class="line">s.erase(sl, sr);</span><br><span class="line">s.emplace(l, r, x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;heapnode&gt;().swap(v);</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(; sl != sr; ++sl)</span><br><span class="line">v.emplace_back(sl-&gt;r - sl-&gt;l + <span class="number">1</span>, sl-&gt;val);</span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i: v)</span><br><span class="line">&#123;</span><br><span class="line">x -= i.len;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, i.val);</span><br><span class="line">ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">assert(ok); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">&#123;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sl != sr)</span><br><span class="line">&#123;</span><br><span class="line">ll temp = (sl-&gt;r - sl-&gt;l + <span class="number">1</span>) * fp(sl-&gt;val, x, y);</span><br><span class="line">temp %= y;</span><br><span class="line">res += temp;</span><br><span class="line">res %= y;</span><br><span class="line">sl++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, res);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">assert(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 区间维护 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
